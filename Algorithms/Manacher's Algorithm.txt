================================================
	M A N A C H E R' s 		A L G O R I T H M	
================================================
Q.: Given a string s, return the longest palindromic substring in s.
Example 1:
	Input: s = "babad"
	Output: "bab"
	Explanation: "aba" is also a valid answer.
	
Example 2:
	Input: s = "cbbd"
	Output: "bb"
================================================
string longestPalindromicSubstring(string s){
	int len = s.length();
	
	// modifying the array to apply manacher's algorithm
	int n = 2 * len + 1;
	char[] arr = new char[n];
	int i = 0;
	arr[i++] = '#';
	for(char c : s.toCharArray()){
		arr[i++] = c;
		arr[i++] = '#';
	}
	
	// applying manacher's algorithm
	int longestC = 0, longestR = 0;
	int c = 0, r = 0;
	int[] p = new int[n];
	for(i = 0; i < n; i++){
		if(i < r){
			int mirror = 2 * c - i;
			p[i] = Math.min(p[m], r - i);
		}
		int a = i - p[i] - 1;
		int b = i + p[i] + 1;
		while(a >= 0 && b < n && arr[a] == arr[b]){
			p[i]++;
			a--;
			b++;
		}
		if(i+p[i] > r){
			c = i;
			r = i + p[i];
		}
		if(longestR < p[i]){
			longestC = i;
			longestR = p[i];
		}
	}
	int start = (longestC - longestR)/2;
	int end = (longestC + longestR)/2;
	return s.substring(start, end);
}