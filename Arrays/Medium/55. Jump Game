You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.
Note:  Return -1 if you can't reach the end of the array.

Input: arr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9}, n = 11
Output: 3 
Explanation:First jump from 1st element to 2nd element with value 3. From here we jump to 5th element with value 9, and from here we will jump to the last. 

Input: arr = {1, 4, 3, 2, 6, 7}, n = 6
Output: 2 
Explanation: First we jump from the 1st to 2nd element and then jump to the last element.

Input: arr = {0, 10, 20}, n = 3
Output: -1
Explanation: We cannot go anywhere from the 1st element.

Input: arr = {1, 2, 3, 1, 1, 0, 2, 5}
Output: -1
Explanation: We can only go until 4th element

Constraints
0 ≤ arr[i] ≤ 10^7
1 ≤ n ≤ 10^7


int maxJump(int[] arr, int n){
	int jumps = 0, far = 0, curr = 0;
	for(int i = 0; i < n; i++){
		far = Math.max(far, arr[i] + i);
		if(i == curr){
			curr = far;
			jumps++;
			if(curr >= n-1) 
				return jumps;
		}
	}
	return -1;
}