You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Example 1:
Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. 
In this case, the max area of water (blue section) the container can contain is 49.

Constraints:
n == height.length
2 <= n <= 10^5
0 <= height[i] <= 10^4

===========================================================================================

/*
	Intuition: 	area = width & height
				width ↑ , area ↑ => distance between two heights maximum
				height ↑, area ↑ => minHeight between two heights greater than previous minHeight
				
		★ Prominence for bigger minHeight increases as the distance decrease between heights
*/

public int maxArea (int[] height){
	int n = height.length;
	int left = 0, height = n-1;
	int maxArea = 0;
	
	while(left < right){
		int minHeight = Math.min(height[left], height[right]);
		int distance = right - left;
		int currArea = distance * minHeight;
		maxArea = Math.max(maxArea, currArea);
		
		// simple implementation
		// if(height[left] < height[right])
		//     left++;
		// else
		//     right--;
		
		// faster implementation
		while(left < right && height[left] <= minHeight) left++;
		while(left < right && height[right] <= minHeight) right--;
	}
	return maxArea;
}