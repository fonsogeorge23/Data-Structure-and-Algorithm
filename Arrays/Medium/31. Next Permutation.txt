A permutation of an array of integers is an arrangement of its members into a sequence or linear order.
The next permutation of an array of integers is the next lexicographically greater permutation of its integer.If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).

• For example, the next permutation of arr = [1,2,3] is [1,3,2].
• Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
• While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.
Given an array of integers nums, find the next permutation of nums.

Note: The replacement must be in place and use only constant extra memory.

==============================================================================================================================
Example 1
Input: nums = [1,2,3]
Output: [1,3,2]

Example 2
Input: nums = [3,2,1]
Output: [1,2,3]

Example 3
Input: nums = [1,1,5]
Output: [1,5,1]
==============================================================================================================================

void nextPermutation (int[] nums){
	int n = nums.length;
	int root = -1, change = -1;
	
	// finding the root index to compute the next permutation
	for (int i = n-2; i >= 0; i--){
		if(nums[i] < nums[i+1]){
			root = i;
			break;
		}
	}
	
	// array sorted in descending order
	if(root == -1)
		reverse(nums, 0, n-1);
		
	// finding the next greater element to compute the permutation
	for(int i = n-1; i > root; i--){
		if(nums[i] > nums[root]){
			change = i;
			break;
		}
	}
	
	swap(nums, root, change);
	reverse(nums, root+1, n-1);
}

void reverse(int[] nums, int start, int end){
	while(start < end){
		swap(nums, start, end);
		start++;
		end--;
	}
}

void swap(int[] arr, int start, int end){
	arr[start] += arr[end];
	arr[end] = arr[start] - arr[end];
	arr[start] = arr[start] - arr[end];
}