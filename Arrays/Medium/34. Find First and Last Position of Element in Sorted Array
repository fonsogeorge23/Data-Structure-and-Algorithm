Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Example 3:
Input: nums = [], target = 0
Output: [-1,-1]

Constraints:
0 <= nums.length <= 105
-10^9 <= nums[i] <= 10^9
nums is a non-decreasing array.
-10^9 <= target <= 10^9
==========================================================================================================
public searchRange(int[] nums, int target){
	int n = nums.length;
	int low = 0, high = n-1;
	int first = -1, last = -1;
	
	// searching in the array
	while(low <= high){
		int mid = low + (high - low)/2;
		if(nums[mid] == target){
			first = mid;
			last = mid;
			while(first > 0 && nums[first - 1] == target)	first --;
			while(last < n-1 && nums[last + 1] == target) 	last++;
			break;
		}
		else if(nums[mid] < target){
			low = mid + 1;
		}
		else{
			high = mid - 1;
		}
	}
	return new int[]{first, last};
}