Given the head of a linked list, remove the nth node from the end of the list and return its head.
Constraints
• The number of nodes in the list is sz : 1 <= sz <= 30
• 0 <= Node.val <= 100
• 1 <= n <= sz

Examples 
===========================================================
Input: 	head = [1, 2, 3, 4, 5]
		n = 2
Output: [1, 2, 3, 5]

Input: 	head = [1], n = 1
		Output = []
		
Input:	head = [1, 2], n = 1
		Output = [1]
===========================================================
public ListNode removeNthFromEnd(ListNode head, int n){
	// two node to maintain the distance from last node
	ListNode fast = head, slow = head;
	
	// making the fast node move first until n
	for(int i = 0; i < n; i++){
		fast = fast.next;
	}
	
	// computing the nth node from end
	if(fast == null) return head.next;
	
	while(fast.next != null){
		fast = fast.next;
		slow = slow.next;
	}
	
	// removing the nth node
	slow.next = slow.next.next;
	
	return head;
}