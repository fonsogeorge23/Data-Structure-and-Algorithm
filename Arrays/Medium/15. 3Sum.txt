Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Example 2:
Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.

Example 3:
Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.

Constraint:
3 <= nums.length <= 3000
-10^5 <= nums[i] <= 10^5

=======================================================================================================
public List<List<Integer>> tripletPairs(int[] nums){
	int n = nums.length;
	
	// sorting nums array to bring the duplicate element together
	Arrays.sort(nums);
	List<List<Integer>> result = new ArrayList<>();
	
	for(int i = 0; i < n; i++){
		// if the element checking for is same as the previous element skip to the next unique element
		// first element will always be unique
		if(i > 0 && nums[i] == nums[i-1]) continue;
		
		// taking each element and finding the sum of the other 2 possible element adding to -(element)
		searchPairs(nums, i+1, -nums[i], result);
	}
	return result;
}


// method to find the elements adding to target
public void searchPairs(int[] nums, int start, int target, List<List<Integer>> res){
	int end = nums.length-1;
	while(start<end){
		// calculate the sum
		int sum = nums[start] + nums[end];
		
		// if sum equals target, pair found
		if(sum == target){
			res.add(Arrays.asList(-target, nums[start], nums[end]));
			start++;
			end--;
			
			// skiping the duplicate elements after comparing the current element
			while(start < end && nums[start] == nums[start+1]) start++;
			while(start < end && nums[end] == nums[end-1]) end--;
		}
		else if(sum < target) start++;
		else end--;
	}
}